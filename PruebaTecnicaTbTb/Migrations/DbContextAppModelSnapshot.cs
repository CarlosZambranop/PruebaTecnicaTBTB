// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PruebaTecnicaTbTb.Context;

#nullable disable

namespace PruebaTecnicaTbTb.Migrations
{
    [DbContext(typeof(DbContextApp))]
    partial class DbContextAppModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.CitaMedica", b =>
                {
                    b.Property<int>("CitaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CitaID"));

                    b.Property<DateTime>("FechaCita")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MedicoID")
                        .HasColumnType("integer");

                    b.Property<string>("MotivoConsulta")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("PacienteID")
                        .HasColumnType("integer");

                    b.HasKey("CitaID");

                    b.HasIndex("MedicoID");

                    b.HasIndex("PacienteID");

                    b.ToTable("citaMedica");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.Medico", b =>
                {
                    b.Property<int>("MedicoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MedicoID"));

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("FechaIngreso")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MedicoID");

                    b.ToTable("medico");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.Paciente", b =>
                {
                    b.Property<int>("PacienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PacienteID"));

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("date");

                    b.Property<int>("MedicoID")
                        .HasColumnType("integer");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("PacienteID");

                    b.HasIndex("MedicoID");

                    b.ToTable("paciente");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.CitaMedica", b =>
                {
                    b.HasOne("PruebaTecnicaTbTb.Models.Medico", "Medico")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("MedicoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PruebaTecnicaTbTb.Models.Paciente", "Paciente")
                        .WithMany("CitasMedicas")
                        .HasForeignKey("PacienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.Paciente", b =>
                {
                    b.HasOne("PruebaTecnicaTbTb.Models.Medico", "Medico")
                        .WithMany()
                        .HasForeignKey("MedicoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medico");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.Medico", b =>
                {
                    b.Navigation("CitasMedicas");
                });

            modelBuilder.Entity("PruebaTecnicaTbTb.Models.Paciente", b =>
                {
                    b.Navigation("CitasMedicas");
                });
#pragma warning restore 612, 618
        }
    }
}
